{
  "filename": "customPage.md",
  "__html": "<h2>Custom page</h2>\n<p>The overall architecture of docsite is based on react, so you should know something about it. You can view <a href=\"https://reactjs.org/\">react</a> to learn it.</p>\n<p>The docsite built-in template includes the home page, document page, blog list page, blog detail page, and community page, corresponding to <code>home</code>, <code>documentation</code>, <code>blog</code>, <code>blogDetail</code>, <code>community</code> in the <code>src/pages</code> directory. For js and css resources, when building, the folder name in the <code>src/pages</code> directory will be used as the name of the js and css resources, and the corresponding js and css files will be generated in the <code>build</code> directory.</p>\n<h3>Page Writing</h3>\n<p>When customizing the page, create a new folder in the <code>src/pages</code> directory. docsite will process the <code>index.jsx</code> and <code>index.scss</code> files in the folder as pages.</p>\n<p>The main structure of the <code>index.jsx</code> of a custom page is as follows:</p>\n<pre><code class=\"language-jsx\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CustomPage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Language</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(props) {\n    <span class=\"hljs-keyword\">super</span>(props);\n    <span class=\"hljs-comment\">// others</span>\n  }\n\n  render() {\n    <span class=\"hljs-keyword\">const</span> language = <span class=\"hljs-keyword\">this</span>.getLanguage();\n    <span class=\"hljs-comment\">// others</span>\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Header</span>\n          <span class=\"hljs-attr\">currentKey</span>=<span class=\"hljs-string\">\"customKey\"</span> // <span class=\"hljs-attr\">key</span> <span class=\"hljs-attr\">defined</span> <span class=\"hljs-attr\">in</span> <span class=\"hljs-attr\">site_config</span>/<span class=\"hljs-attr\">site.js</span> <span class=\"hljs-attr\">pageMenu</span>\n          <span class=\"hljs-attr\">Type</span>=<span class=\"hljs-string\">\"normal\"</span>\n          <span class=\"hljs-attr\">Logo</span>=<span class=\"hljs-string\">\"/img/docsite.png\"</span>\n          <span class=\"hljs-attr\">Language</span>=<span class=\"hljs-string\">{language}</span>\n          <span class=\"hljs-attr\">onLanguageChange</span>=<span class=\"hljs-string\">{this.onLanguageChange}</span>\n        /&gt;</span>\n        {/* others */}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    )\n  }\n}\n\ndocument.getElementById('root') &amp;&amp; ReactDOM.render(<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CustomPage</span> /&gt;</span>, document.getElementById('root'));\n\nexport default CustomPage;\n</span></code></pre>\n<p>Now let us have a explanation:</p>\n<ol>\n<li>The entire page should extend the <code>src/components/language</code> component, which provides two methods <code>onLanguageChange</code> and <code>getLanguage</code> for language switching (passed to the Header component) and the language value.</li>\n<li>To support SEO, docsite will call <code>ReactDOMServer.render</code> to render the page jsx into a static HTML string and finally combine it into the page, so lifecycle methods of server rendering related, such as <code>constructor</code>, <code>componentWillMount</code>, <code>render</code> etc. that will be called, do not have undefined or unrecognized variables and methods, including the components they depend on, or an error will occur.</li>\n<li><code>document.getElementById('root') &amp;&amp; ReactDOM.render(&lt;CustomPage /&gt;, document.getElementById('root'));</code> is for normal page rendering, the statements before <code>&amp;&amp;</code> is used to prevent errors when rendering on the server side ,the dom node does not exist.</li>\n<li><code>export default CustomPage;</code> The export page is used by docsite to render the page into a static HTML string.</li>\n</ol>\n<h3>Language Configuration</h3>\n<p>To support internationalization, you need to configure the international text of the page. Create a new file in the <code>site_config</code> directory, configure the required text, and import it in the page. Its basic structure is as follows:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-string\">'zh-cn'</span>: {\n\n  },\n  <span class=\"hljs-string\">'en-us'</span>: {\n\n  },\n}\n</code></pre>\n<h3>Add to site</h3>\n<p>Once the page is complete, it needs to be added to the site. Define <code>key</code>, <code>title</code>, <code>link</code>, etc. of the page in <code>pageMenu</code> in the <code>site_config/site.js</code> file.</p>\n<p>Where <code>key</code> is used for the <code>Header</code>'s property <code>currentKey</code>, which is used to setting the selected state of the top menu. <code>title</code> is used for the display title of the top menu. <code>link</code> is used to set the access link. The rules of link are as follows:</p>\n<ol>\n<li>Start with <code>/zh-cn</code> or <code>/en-us</code>.</li>\n<li>If the folder name of the page is custom, the English access link is <code>/en-us/custom/index.html</code>, and the Chinese access link is <code>/zh-cn/custom/index.html</code>.</li>\n</ol>\n"
}